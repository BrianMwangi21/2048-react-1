{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/js/application.js","application.js","src/js/game_manager.js","src/js/grid.js","src/js/html_actuator.js","src/js/keyboard_input_manager.js","src/js/local_storage_manager.js","src/js/tile.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","GameManager","KeyboardInputManager","HTMLActuator","LocalStorageManager","window","requestAnimationFrame","./game_manager","./html_actuator","./keyboard_input_manager","./local_storage_manager",2,"size","InputManager","Actuator","StorageManager","this","inputManager","storageManager","actuator","startTiles","on","move","bind","restart","keepPlaying","setup","Tile","Grid","prototype","clearGameState","continueGame","isGameTerminated","over","won","previousState","getGameState","grid","cells","score","addStartTiles","actuate","addRandomTile","cellsAvailable","value","Math","random","tile","randomAvailableCell","insertTile","getBestScore","setBestScore","setGameState","serialize","bestScore","terminated","prepareTiles","eachCell","x","y","mergedFrom","savePosition","moveTile","cell","updatePosition","direction","self","vector","getVector","traversals","buildTraversals","moved","forEach","cellContent","positions","findFarthestPosition","next","merged","removeTile","farthest","positionsEqual","movesAvailable","map",0,3,"pos","push","reverse","previous","withinBounds","cellAvailable","tileMatchesAvailable","other","first","second","./grid","./tile","fromState","empty","row","state","position","availableCells","floor","callback","cellOccupied","cellState",4,"tileContainer","document","querySelector","scoreContainer","bestContainer","messageContainer","metadata","clearContainer","column","addTile","updateScore","updateBestScore","message","clearMessage","container","firstChild","removeChild","wrapper","createElement","inner","previousPosition","positionClass","classes","applyClasses","classList","add","textContent","appendChild","element","setAttribute","join","normalizePosition","difference","addition","type","getElementsByTagName","remove",5,"events","navigator","msPointerEnabled","eventTouchstart","eventTouchmove","eventTouchend","listen","event","emit","data","callbacks",38,39,40,37,75,76,74,72,87,68,83,65,"addEventListener","modifiers","altKey","ctrlKey","metaKey","shiftKey","mapped","which","undefined","preventDefault","bindButtonPress","touchStartClientX","touchStartClientY","gameContainer","getElementsByClassName","touches","targetTouches","pageX","pageY","clientX","clientY","touchEndClientX","touchEndClientY","changedTouches","dx","absDx","abs","dy","absDy","max","selector","fn","button",6,"bestScoreKey","gameStateKey","supported","localStorageSupported","storage","localStorage","fakeStorage","_data","setItem","id","val","String","getItem","hasOwnProperty","removeItem","clear","testKey","error","stateJSON","JSON","parse","gameState","stringify",7],"mappings":"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","file":"application.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var GameManager = require('./game_manager'),\n    KeyboardInputManager = require('./keyboard_input_manager'),\n    HTMLActuator = require('./html_actuator'),\n    LocalStorageManager = require('./local_storage_manager');\n\n// Wait till the browser is ready to render the game (avoids glitches)\nwindow.requestAnimationFrame(function () {\n  new GameManager(4, KeyboardInputManager, HTMLActuator, LocalStorageManager);\n});\n",null,"var Tile = require('./tile'),\n    Grid = require('./grid');\n\nfunction GameManager(size, InputManager, Actuator, StorageManager) {\n  this.size           = size; // Size of the grid\n  this.inputManager   = new InputManager;\n  this.storageManager = new StorageManager;\n  this.actuator       = new Actuator;\n\n  this.startTiles     = 2;\n\n  this.inputManager.on(\"move\", this.move.bind(this));\n  this.inputManager.on(\"restart\", this.restart.bind(this));\n  this.inputManager.on(\"keepPlaying\", this.keepPlaying.bind(this));\n\n  this.setup();\n}\n\n// Restart the game\nGameManager.prototype.restart = function () {\n  this.storageManager.clearGameState();\n  this.actuator.continueGame(); // Clear the game won/lost message\n  this.setup();\n};\n\n// Keep playing after winning (allows going over 2048)\nGameManager.prototype.keepPlaying = function () {\n  this.keepPlaying = true;\n  this.actuator.continueGame(); // Clear the game won/lost message\n};\n\n// Return true if the game is lost, or has won and the user hasn't kept playing\nGameManager.prototype.isGameTerminated = function () {\n  return this.over || (this.won && !this.keepPlaying);\n};\n\n// Set up the game\nGameManager.prototype.setup = function () {\n  var previousState = this.storageManager.getGameState();\n\n  // Reload the game from a previous game if present\n  if (previousState) {\n    this.grid        = new Grid(previousState.grid.size,\n                                previousState.grid.cells); // Reload grid\n    this.score       = previousState.score;\n    this.over        = previousState.over;\n    this.won         = previousState.won;\n    this.keepPlaying = previousState.keepPlaying;\n  } else {\n    this.grid        = new Grid(this.size);\n    this.score       = 0;\n    this.over        = false;\n    this.won         = false;\n    this.keepPlaying = false;\n\n    // Add the initial tiles\n    this.addStartTiles();\n  }\n\n  // Update the actuator\n  this.actuate();\n};\n\n// Set up the initial tiles to start the game with\nGameManager.prototype.addStartTiles = function () {\n  for (var i = 0; i < this.startTiles; i++) {\n    this.addRandomTile();\n  }\n};\n\n// Adds a tile in a random position\nGameManager.prototype.addRandomTile = function () {\n  if (this.grid.cellsAvailable()) {\n    var value = Math.random() < 0.9 ? 2 : 4;\n    var tile = new Tile(this.grid.randomAvailableCell(), value);\n\n    this.grid.insertTile(tile);\n  }\n};\n\n// Sends the updated grid to the actuator\nGameManager.prototype.actuate = function () {\n  if (this.storageManager.getBestScore() < this.score) {\n    this.storageManager.setBestScore(this.score);\n  }\n\n  // Clear the state when the game is over (game over only, not win)\n  if (this.over) {\n    this.storageManager.clearGameState();\n  } else {\n    this.storageManager.setGameState(this.serialize());\n  }\n\n  this.actuator.actuate(this.grid, {\n    score:      this.score,\n    over:       this.over,\n    won:        this.won,\n    bestScore:  this.storageManager.getBestScore(),\n    terminated: this.isGameTerminated()\n  });\n\n};\n\n// Represent the current game as an object\nGameManager.prototype.serialize = function () {\n  return {\n    grid:        this.grid.serialize(),\n    score:       this.score,\n    over:        this.over,\n    won:         this.won,\n    keepPlaying: this.keepPlaying\n  };\n};\n\n// Save all tile positions and remove merger info\nGameManager.prototype.prepareTiles = function () {\n  this.grid.eachCell(function (x, y, tile) {\n    if (tile) {\n      tile.mergedFrom = null;\n      tile.savePosition();\n    }\n  });\n};\n\n// Move a tile and its representation\nGameManager.prototype.moveTile = function (tile, cell) {\n  this.grid.cells[tile.x][tile.y] = null;\n  this.grid.cells[cell.x][cell.y] = tile;\n  tile.updatePosition(cell);\n};\n\n// Move tiles on the grid in the specified direction\nGameManager.prototype.move = function (direction) {\n  // 0: up, 1: right, 2: down, 3: left\n  var self = this;\n\n  if (this.isGameTerminated()) return; // Don't do anything if the game's over\n\n  var cell, tile;\n\n  var vector     = this.getVector(direction);\n  var traversals = this.buildTraversals(vector);\n  var moved      = false;\n\n  // Save the current tile positions and remove merger information\n  this.prepareTiles();\n\n  // Traverse the grid in the right direction and move tiles\n  traversals.x.forEach(function (x) {\n    traversals.y.forEach(function (y) {\n      cell = { x: x, y: y };\n      tile = self.grid.cellContent(cell);\n\n      if (tile) {\n        var positions = self.findFarthestPosition(cell, vector);\n        var next      = self.grid.cellContent(positions.next);\n\n        // Only one merger per row traversal?\n        if (next && next.value === tile.value && !next.mergedFrom) {\n          var merged = new Tile(positions.next, tile.value * 2);\n          merged.mergedFrom = [tile, next];\n\n          self.grid.insertTile(merged);\n          self.grid.removeTile(tile);\n\n          // Converge the two tiles' positions\n          tile.updatePosition(positions.next);\n\n          // Update the score\n          self.score += merged.value;\n\n          // The mighty 2048 tile\n          if (merged.value === 2048) self.won = true;\n        } else {\n          self.moveTile(tile, positions.farthest);\n        }\n\n        if (!self.positionsEqual(cell, tile)) {\n          moved = true; // The tile moved from its original cell!\n        }\n      }\n    });\n  });\n\n  if (moved) {\n    this.addRandomTile();\n\n    if (!this.movesAvailable()) {\n      this.over = true; // Game over!\n    }\n\n    this.actuate();\n  }\n};\n\n// Get the vector representing the chosen direction\nGameManager.prototype.getVector = function (direction) {\n  // Vectors representing tile movement\n  var map = {\n    0: { x: 0,  y: -1 }, // Up\n    1: { x: 1,  y: 0 },  // Right\n    2: { x: 0,  y: 1 },  // Down\n    3: { x: -1, y: 0 }   // Left\n  };\n\n  return map[direction];\n};\n\n// Build a list of positions to traverse in the right order\nGameManager.prototype.buildTraversals = function (vector) {\n  var traversals = { x: [], y: [] };\n\n  for (var pos = 0; pos < this.size; pos++) {\n    traversals.x.push(pos);\n    traversals.y.push(pos);\n  }\n\n  // Always traverse from the farthest cell in the chosen direction\n  if (vector.x === 1) traversals.x = traversals.x.reverse();\n  if (vector.y === 1) traversals.y = traversals.y.reverse();\n\n  return traversals;\n};\n\nGameManager.prototype.findFarthestPosition = function (cell, vector) {\n  var previous;\n\n  // Progress towards the vector direction until an obstacle is found\n  do {\n    previous = cell;\n    cell     = { x: previous.x + vector.x, y: previous.y + vector.y };\n  } while (this.grid.withinBounds(cell) &&\n           this.grid.cellAvailable(cell));\n\n  return {\n    farthest: previous,\n    next: cell // Used to check if a merge is required\n  };\n};\n\nGameManager.prototype.movesAvailable = function () {\n  return this.grid.cellsAvailable() || this.tileMatchesAvailable();\n};\n\n// Check for available matches between tiles (more expensive check)\nGameManager.prototype.tileMatchesAvailable = function () {\n  var self = this;\n\n  var tile;\n\n  for (var x = 0; x < this.size; x++) {\n    for (var y = 0; y < this.size; y++) {\n      tile = this.grid.cellContent({ x: x, y: y });\n\n      if (tile) {\n        for (var direction = 0; direction < 4; direction++) {\n          var vector = self.getVector(direction);\n          var cell   = { x: x + vector.x, y: y + vector.y };\n\n          var other  = self.grid.cellContent(cell);\n\n          if (other && other.value === tile.value) {\n            return true; // These two tiles can be merged\n          }\n        }\n      }\n    }\n  }\n\n  return false;\n};\n\nGameManager.prototype.positionsEqual = function (first, second) {\n  return first.x === second.x && first.y === second.y;\n};\n\nmodule.exports = GameManager;\n","var Tile = require('./tile');\n\nfunction Grid(size, previousState) {\n  this.size = size;\n  this.cells = previousState ? this.fromState(previousState) : this.empty();\n}\n\n// Build a grid of the specified size\nGrid.prototype.empty = function () {\n  var cells = [];\n\n  for (var x = 0; x < this.size; x++) {\n    var row = cells[x] = [];\n\n    for (var y = 0; y < this.size; y++) {\n      row.push(null);\n    }\n  }\n\n  return cells;\n};\n\nGrid.prototype.fromState = function (state) {\n  var cells = [];\n\n  for (var x = 0; x < this.size; x++) {\n    var row = cells[x] = [];\n\n    for (var y = 0; y < this.size; y++) {\n      var tile = state[x][y];\n      row.push(tile ? new Tile(tile.position, tile.value) : null);\n    }\n  }\n\n  return cells;\n};\n\n// Find the first available random position\nGrid.prototype.randomAvailableCell = function () {\n  var cells = this.availableCells();\n\n  if (cells.length) {\n    return cells[Math.floor(Math.random() * cells.length)];\n  }\n};\n\nGrid.prototype.availableCells = function () {\n  var cells = [];\n\n  this.eachCell(function (x, y, tile) {\n    if (!tile) {\n      cells.push({ x: x, y: y });\n    }\n  });\n\n  return cells;\n};\n\n// Call callback for every cell\nGrid.prototype.eachCell = function (callback) {\n  for (var x = 0; x < this.size; x++) {\n    for (var y = 0; y < this.size; y++) {\n      callback(x, y, this.cells[x][y]);\n    }\n  }\n};\n\n// Check if there are any cells available\nGrid.prototype.cellsAvailable = function () {\n  return !!this.availableCells().length;\n};\n\n// Check if the specified cell is taken\nGrid.prototype.cellAvailable = function (cell) {\n  return !this.cellOccupied(cell);\n};\n\nGrid.prototype.cellOccupied = function (cell) {\n  return !!this.cellContent(cell);\n};\n\nGrid.prototype.cellContent = function (cell) {\n  if (this.withinBounds(cell)) {\n    return this.cells[cell.x][cell.y];\n  } else {\n    return null;\n  }\n};\n\n// Inserts a tile at its position\nGrid.prototype.insertTile = function (tile) {\n  this.cells[tile.x][tile.y] = tile;\n};\n\nGrid.prototype.removeTile = function (tile) {\n  this.cells[tile.x][tile.y] = null;\n};\n\nGrid.prototype.withinBounds = function (position) {\n  return position.x >= 0 && position.x < this.size &&\n         position.y >= 0 && position.y < this.size;\n};\n\nGrid.prototype.serialize = function () {\n  var cellState = [];\n\n  for (var x = 0; x < this.size; x++) {\n    var row = cellState[x] = [];\n\n    for (var y = 0; y < this.size; y++) {\n      row.push(this.cells[x][y] ? this.cells[x][y].serialize() : null);\n    }\n  }\n\n  return {\n    size: this.size,\n    cells: cellState\n  };\n};\n\nmodule.exports = Grid;\n","function HTMLActuator() {\n  this.tileContainer    = document.querySelector(\".tile-container\");\n  this.scoreContainer   = document.querySelector(\".score-container\");\n  this.bestContainer    = document.querySelector(\".best-container\");\n  this.messageContainer = document.querySelector(\".game-message\");\n\n  this.score = 0;\n}\n\nHTMLActuator.prototype.actuate = function (grid, metadata) {\n  var self = this;\n\n  window.requestAnimationFrame(function () {\n    self.clearContainer(self.tileContainer);\n\n    grid.cells.forEach(function (column) {\n      column.forEach(function (cell) {\n        if (cell) {\n          self.addTile(cell);\n        }\n      });\n    });\n\n    self.updateScore(metadata.score);\n    self.updateBestScore(metadata.bestScore);\n\n    if (metadata.terminated) {\n      if (metadata.over) {\n        self.message(false); // You lose\n      } else if (metadata.won) {\n        self.message(true); // You win!\n      }\n    }\n\n  });\n};\n\n// Continues the game (both restart and keep playing)\nHTMLActuator.prototype.continueGame = function () {\n  this.clearMessage();\n};\n\nHTMLActuator.prototype.clearContainer = function (container) {\n  while (container.firstChild) {\n    container.removeChild(container.firstChild);\n  }\n};\n\nHTMLActuator.prototype.addTile = function (tile) {\n  var self = this;\n\n  var wrapper   = document.createElement(\"div\");\n  var inner     = document.createElement(\"div\");\n  var position  = tile.previousPosition || { x: tile.x, y: tile.y };\n  var positionClass = this.positionClass(position);\n\n  // We can't use classlist because it somehow glitches when replacing classes\n  var classes = [\"tile\", \"tile-\" + tile.value, positionClass];\n\n  if (tile.value > 2048) classes.push(\"tile-super\");\n\n  this.applyClasses(wrapper, classes);\n\n  inner.classList.add(\"tile-inner\");\n  inner.textContent = tile.value;\n\n  if (tile.previousPosition) {\n    // Make sure that the tile gets rendered in the previous position first\n    window.requestAnimationFrame(function () {\n      classes[2] = self.positionClass({ x: tile.x, y: tile.y });\n      self.applyClasses(wrapper, classes); // Update the position\n    });\n  } else if (tile.mergedFrom) {\n    classes.push(\"tile-merged\");\n    this.applyClasses(wrapper, classes);\n\n    // Render the tiles that merged\n    tile.mergedFrom.forEach(function (merged) {\n      self.addTile(merged);\n    });\n  } else {\n    classes.push(\"tile-new\");\n    this.applyClasses(wrapper, classes);\n  }\n\n  // Add the inner part of the tile to the wrapper\n  wrapper.appendChild(inner);\n\n  // Put the tile on the board\n  this.tileContainer.appendChild(wrapper);\n};\n\nHTMLActuator.prototype.applyClasses = function (element, classes) {\n  element.setAttribute(\"class\", classes.join(\" \"));\n};\n\nHTMLActuator.prototype.normalizePosition = function (position) {\n  return { x: position.x + 1, y: position.y + 1 };\n};\n\nHTMLActuator.prototype.positionClass = function (position) {\n  position = this.normalizePosition(position);\n  return \"tile-position-\" + position.x + \"-\" + position.y;\n};\n\nHTMLActuator.prototype.updateScore = function (score) {\n  this.clearContainer(this.scoreContainer);\n\n  var difference = score - this.score;\n  this.score = score;\n\n  this.scoreContainer.textContent = this.score;\n\n  if (difference > 0) {\n    var addition = document.createElement(\"div\");\n    addition.classList.add(\"score-addition\");\n    addition.textContent = \"+\" + difference;\n\n    this.scoreContainer.appendChild(addition);\n  }\n};\n\nHTMLActuator.prototype.updateBestScore = function (bestScore) {\n  this.bestContainer.textContent = bestScore;\n};\n\nHTMLActuator.prototype.message = function (won) {\n  var type    = won ? \"game-won\" : \"game-over\";\n  var message = won ? \"You win!\" : \"Game over!\";\n\n  this.messageContainer.classList.add(type);\n  this.messageContainer.getElementsByTagName(\"p\")[0].textContent = message;\n};\n\nHTMLActuator.prototype.clearMessage = function () {\n  // IE only takes one value to remove at a time.\n  this.messageContainer.classList.remove(\"game-won\");\n  this.messageContainer.classList.remove(\"game-over\");\n};\n\nmodule.exports = HTMLActuator;\n","function KeyboardInputManager() {\n  this.events = {};\n\n  if (window.navigator.msPointerEnabled) {\n    //Internet Explorer 10 style\n    this.eventTouchstart    = \"MSPointerDown\";\n    this.eventTouchmove     = \"MSPointerMove\";\n    this.eventTouchend      = \"MSPointerUp\";\n  } else {\n    this.eventTouchstart    = \"touchstart\";\n    this.eventTouchmove     = \"touchmove\";\n    this.eventTouchend      = \"touchend\";\n  }\n\n  this.listen();\n}\n\nKeyboardInputManager.prototype.on = function (event, callback) {\n  if (!this.events[event]) {\n    this.events[event] = [];\n  }\n  this.events[event].push(callback);\n};\n\nKeyboardInputManager.prototype.emit = function (event, data) {\n  var callbacks = this.events[event];\n  if (callbacks) {\n    callbacks.forEach(function (callback) {\n      callback(data);\n    });\n  }\n};\n\nKeyboardInputManager.prototype.listen = function () {\n  var self = this;\n\n  var map = {\n    38: 0, // Up\n    39: 1, // Right\n    40: 2, // Down\n    37: 3, // Left\n    75: 0, // Vim up\n    76: 1, // Vim right\n    74: 2, // Vim down\n    72: 3, // Vim left\n    87: 0, // W\n    68: 1, // D\n    83: 2, // S\n    65: 3  // A\n  };\n\n  // Respond to direction keys\n  document.addEventListener(\"keydown\", function (event) {\n    var modifiers = event.altKey || event.ctrlKey || event.metaKey ||\n                    event.shiftKey;\n    var mapped    = map[event.which];\n\n    if (!modifiers) {\n      if (mapped !== undefined) {\n        event.preventDefault();\n        self.emit(\"move\", mapped);\n      }\n    }\n\n    // R key restarts the game\n    if (!modifiers && event.which === 82) {\n      self.restart.call(self, event);\n    }\n  });\n\n  // Respond to button presses\n  this.bindButtonPress(\".retry-button\", this.restart);\n  this.bindButtonPress(\".restart-button\", this.restart);\n  this.bindButtonPress(\".keep-playing-button\", this.keepPlaying);\n\n  // Respond to swipe events\n  var touchStartClientX, touchStartClientY;\n  var gameContainer = document.getElementsByClassName(\"game-container\")[0];\n\n  gameContainer.addEventListener(this.eventTouchstart, function (event) {\n    if ((!window.navigator.msPointerEnabled && event.touches.length > 1) ||\n        event.targetTouches.length > 1) {\n      return; // Ignore if touching with more than 1 finger\n    }\n\n    if (window.navigator.msPointerEnabled) {\n      touchStartClientX = event.pageX;\n      touchStartClientY = event.pageY;\n    } else {\n      touchStartClientX = event.touches[0].clientX;\n      touchStartClientY = event.touches[0].clientY;\n    }\n\n    event.preventDefault();\n  });\n\n  gameContainer.addEventListener(this.eventTouchmove, function (event) {\n    event.preventDefault();\n  });\n\n  gameContainer.addEventListener(this.eventTouchend, function (event) {\n    if ((!window.navigator.msPointerEnabled && event.touches.length > 0) ||\n        event.targetTouches.length > 0) {\n      return; // Ignore if still touching with one or more fingers\n    }\n\n    var touchEndClientX, touchEndClientY;\n\n    if (window.navigator.msPointerEnabled) {\n      touchEndClientX = event.pageX;\n      touchEndClientY = event.pageY;\n    } else {\n      touchEndClientX = event.changedTouches[0].clientX;\n      touchEndClientY = event.changedTouches[0].clientY;\n    }\n\n    var dx = touchEndClientX - touchStartClientX;\n    var absDx = Math.abs(dx);\n\n    var dy = touchEndClientY - touchStartClientY;\n    var absDy = Math.abs(dy);\n\n    if (Math.max(absDx, absDy) > 10) {\n      // (right : left) : (down : up)\n      self.emit(\"move\", absDx > absDy ? (dx > 0 ? 1 : 3) : (dy > 0 ? 2 : 0));\n    }\n  });\n};\n\nKeyboardInputManager.prototype.restart = function (event) {\n  event.preventDefault();\n  this.emit(\"restart\");\n};\n\nKeyboardInputManager.prototype.keepPlaying = function (event) {\n  event.preventDefault();\n  this.emit(\"keepPlaying\");\n};\n\nKeyboardInputManager.prototype.bindButtonPress = function (selector, fn) {\n  var button = document.querySelector(selector);\n  button.addEventListener(\"click\", fn.bind(this));\n  button.addEventListener(this.eventTouchend, fn.bind(this));\n};\n\nmodule.exports = KeyboardInputManager;\n","window.fakeStorage = {\n  _data: {},\n\n  setItem: function (id, val) {\n    return this._data[id] = String(val);\n  },\n\n  getItem: function (id) {\n    return this._data.hasOwnProperty(id) ? this._data[id] : undefined;\n  },\n\n  removeItem: function (id) {\n    return delete this._data[id];\n  },\n\n  clear: function () {\n    return this._data = {};\n  }\n};\n\nfunction LocalStorageManager() {\n  this.bestScoreKey     = \"bestScore\";\n  this.gameStateKey     = \"gameState\";\n\n  var supported = this.localStorageSupported();\n  this.storage = supported ? window.localStorage : window.fakeStorage;\n}\n\nLocalStorageManager.prototype.localStorageSupported = function () {\n  var testKey = \"test\";\n  var storage = window.localStorage;\n\n  try {\n    storage.setItem(testKey, \"1\");\n    storage.removeItem(testKey);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\n// Best score getters/setters\nLocalStorageManager.prototype.getBestScore = function () {\n  return this.storage.getItem(this.bestScoreKey) || 0;\n};\n\nLocalStorageManager.prototype.setBestScore = function (score) {\n  this.storage.setItem(this.bestScoreKey, score);\n};\n\n// Game state getters/setters and clearing\nLocalStorageManager.prototype.getGameState = function () {\n  var stateJSON = this.storage.getItem(this.gameStateKey);\n  return stateJSON ? JSON.parse(stateJSON) : null;\n};\n\nLocalStorageManager.prototype.setGameState = function (gameState) {\n  this.storage.setItem(this.gameStateKey, JSON.stringify(gameState));\n};\n\nLocalStorageManager.prototype.clearGameState = function () {\n  this.storage.removeItem(this.gameStateKey);\n};\n\nmodule.exports = LocalStorageManager;\n","function Tile(position, value) {\n  this.x                = position.x;\n  this.y                = position.y;\n  this.value            = value || 2;\n\n  this.previousPosition = null;\n  this.mergedFrom       = null; // Tracks tiles that merged together\n}\n\nTile.prototype.savePosition = function () {\n  this.previousPosition = { x: this.x, y: this.y };\n};\n\nTile.prototype.updatePosition = function (position) {\n  this.x = position.x;\n  this.y = position.y;\n};\n\nTile.prototype.serialize = function () {\n  return {\n    position: {\n      x: this.x,\n      y: this.y\n    },\n    value: this.value\n  };\n};\n\nmodule.exports = Tile;\n"],"sourceRoot":"/source/"}